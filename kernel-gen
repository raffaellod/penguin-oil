#!/usr/bin/env python
# -*- coding: utf-8; mode: python; tab-width: 3; indent-tabs-mode: nil -*-
#
# Copyright 2012-2015, 2017, 2021 Raffaello D. Di Napoli
#
# This file is part of kernel-tools.
#
# kernel-tools is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# kernel-tools is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along with
# kernel-tools. If not, see <http://www.gnu.org/licenses/>.
#-----------------------------------------------------------------------------

"""Generates a Portage binary package containing a kernel image and related
in-tree kernel modules, optionally generating an initramfs from a compatible
self-contained initramfs-building system such as Tinytium.
"""

import sys

##############################################################################
# Globals

def main(args):
   """Implementation of __main__.

   iterable(str*) args
      Command-line arguments.
   int return
      Command return status.
   """

   import argparse
   import kerneltools
   import os

   argparser = argparse.ArgumentParser(add_help=False)
   argparser.add_argument(
      '-a', '--arch', metavar='ARCH',
      help='Build a kernel for the specified ARCHitecture. Defaults to ' +
           'Portage\'s ARCH variable.'
   )
   argparser.add_argument(
      '--help', action='help',
      help='Show this informative message and exit.'
   )
   argparser.add_argument(
      '--initramfs-debug', action='store_true', default=False,
      help='Dump the contents of the generated initramfs before turning it ' +
           'into a cpio archive.'
   )
   argparser.add_argument(
      '-i', '--initramfs-source', default=True,
      help='Use a specific initramfs source directory. Defaults to ' +
           '`${ROOT}/usr/src/initramfs\'.'
   )
   argparser.add_argument(
      '--install-only', action='store_true', default=False,
      help='Installs the packages generated by running with --no-install.'
   )
   argparser.add_argument(
      '--no-initramfs', dest='initramfs_source', action='store_false',
      help='Ignore the initramfs directory, even if existent.'
   )
   argparser.add_argument(
      '--no-install', dest='install', action='store_false', default=True,
      help='Build and package the kernel and update out-of-tree (external) ' +
           'modules\' packages (unless --no-oot-modules), but donâ€™t ' +
           'install anything.'
   )
   argparser.add_argument(
      '--no-oot-modules', dest='oot_modules',
      action='store_false', default=True,
      help='Don\'t rebuild or install packages providing out-of-tree ' +
           '(external) modules.'
   )
   argparser.add_argument(
      '-o', '--overlay',
      help='Place the generated binary package in the specified overlay. ' +
           'Defaults to the overlay with the highest priority (the last in ' +
           '$(PORTDIR_OVERLAY}).'
   )
   argparser.add_argument(
      '-r', '--root',
      help='Specify the root directory. Defaults to Portage\'s ${ROOT}.'
   )
   argparser.add_argument(
      '-s', '--source',
      help='Select the kernel source directory. Defaults to the current ' +
           'directory or `${ROOT}/usr/src/linux\'.'
   )
   argparser.add_argument(
      '-v', '--verbose', action='store_true', default=False,
      help='Enable verbose output (mainly from the package manager).'
   )
   args = argparser.parse_args()

   try:
      gen = kerneltools.Generator(args.root, args.arch)
      gen.set_sources(args.source, args.initramfs_source)
      if not args.install_only:
         gen.create_ebuild(args.overlay)
         gen.build_kernel(args.oot_modules)
         gen.package(args.initramfs_debug)
      if args.install or args.install_only:
         gen.install(args.oot_modules)
   except kerneltools.GeneratorError:
      # kerneltools.Generator already displayed error information, so just
      # return.
      return 1
   return 0

if __name__ == '__main__':
   sys.exit(main(sys.argv))
